---
- name: Deploy Tomcat container and deploy WAR file using Podman
  hosts: my_servers  
  vars:
    tomcat_image: "docker.io/library/tomcat:latest"
    war_source_path: "/home/madhur/Downloads/hello.war"
    war_dest_path: "/tmp/tomcat2/hello.war"
    jmx_agent_url: "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.16.1/jmx_prometheus_javaagent-0.16.1.jar"
    jmx_agent_dest: "/tmp/tomcat2/jmx_prometheus_javaagent-0.16.1.jar"
    webapps_dir: "/tmp/tomcat2/webapps"
    logs_dir: "/tmp/tomcat2/logs"
    setenv_content: |
      JAVA_OPTS="$JAVA_OPTS -javaagent:/usr/local/tomcat/bin/jmx_prometheus_javaagent-0.16.1.jar=9998:/usr/local/tomcat/bin/tomcat1.yml"
      export JAVA_OPTS
    setenv_dest: "/tmp/tomcat2/setenv.sh"
    tomcat_yml_content: |
      lowercaseOutputLabelNames: true
      lowercaseOutputName: true
      whitelistObjectNames: ["java.lang:type=OperatingSystem"]
      blacklistObjectNames: []
      rules:
        - pattern: 'java.lang<type=OperatingSystem><>(committed_virtual_memory|free_physical_memory|free_swap_space|total_physical_memory|total_swap_space)_size:'
          name: os_$1_bytes
          type: GAUGE
          attrNameSnakeCase: true
        - pattern: 'java.lang<type=OperatingSystem><>((?!process_cpu_time)\w+):'
          name: os_$1
          type: GAUGE
          attrNameSnakeCase: true
    tomcat_yml_dest: "/tmp/tomcat2/tomcat1.yml"
    tomcat_container_name: "tomcat1"
    tomcat_ports:
      - "8077:8080"
      - "9998:9998"
    container_volumes:
      - "{{ war_dest_path }}:/usr/local/tomcat/webapps/ROOT.war"
      - "{{ jmx_agent_dest }}:/usr/local/tomcat/bin/jmx_prometheus_javaagent-0.16.1.jar"
      - "{{ setenv_dest }}:/usr/local/tomcat/bin/setenv.sh"
      - "{{ tomcat_yml_dest }}:/usr/local/tomcat/bin/tomcat1.yml"
      - "{{ webapps_dir }}:/usr/local/tomcat/webapps"
      - "{{ logs_dir }}:/usr/local/tomcat/logs"
    tomcat_url: "http://localhost:8077/"
    tomcat_status_filter: "name=tomcat1"

  tasks:
    - name: Create the /tmp/tomcat2/logs directory
      file:
        path: /tmp/tomcat2/logs
        state: directory

    - name: Create the /tmp/tomcat2/webapps directory
      file:
        path: /tmp/tomcat2/webapps
        state: directory
        
    - name: Pull the Tomcat container image
      containers.podman.podman_image:
        name: "{{ tomcat_image }}"
        tag: latest

    - name: Ensure SampleWebApp.war file exists on the controller
      stat:
        path: "{{ war_source_path }}"
      register: war_file

    - name: Copy SampleWebApp.war to /tmp directory
      copy:
        src: "{{ war_source_path }}"
        dest: "{{ war_dest_path }}"

    - name: Download JMX Prometheus Java agent JAR
      get_url:
        url: "{{ jmx_agent_url }}"
        dest: "{{ jmx_agent_dest }}"

    - name: Create setenv.sh for Tomcat
      copy:
        content: "{{ setenv_content }}"
        dest: "{{ setenv_dest }}"
        mode: '0755'

    - name: Create tomcat1.yml for JMX exporter
      copy:
        content: "{{ tomcat_yml_content }}"
        dest: "{{ tomcat_yml_dest }}"

    - name: Run Tomcat container with JMX exporter
      containers.podman.podman_container:
        name: "{{ tomcat_container_name }}"
        image: "{{ tomcat_image }}"
        state: started
        ports: "{{ tomcat_ports }}"
        volumes: "{{ container_volumes }}"

    - name: Verify Tomcat container is running
      command: podman ps --filter "{{ tomcat_status_filter }}" --format "{{'{{.Status}}'}}"
      register: container_status

    - name: Debug container status
      debug:
        var: container_status.stdout

    - name: Print Tomcat container logs for debugging
      command: podman logs {{ tomcat_container_name }}
      register: tomcat_logs
      ignore_errors: yes

    - name: Debug Tomcat logs
      debug:
        var: tomcat_logs.stdout

    - name: Verify sample application is accessible
      uri:
        url: "{{ tomcat_url }}"
        status_code: 200
