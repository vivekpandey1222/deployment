---
- name: Ensure Tomcat2 container is installed and running
  hosts: my_servers
  vars:
    tomcat_image: "docker.io/library/tomcat:latest"
    war_source_path: "/home/madhur/Downloads/hello.war"
    war_dest_path: "/tmp/tomcat2/hello.war"
    jmx_agent_url: "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.16.1/jmx_prometheus_javaagent-0.16.1.jar"
    jmx_agent_dest: "/tmp/tomcat2/jmx_prometheus_javaagent-0.16.1.jar"
    webapps_dir: "/tmp/tomcat2/webapps"
    logs_dir: "/tmp/tomcat2/logs"
    setenv_content: |
      JAVA_OPTS="$JAVA_OPTS -javaagent:/usr/local/tomcat/bin/jmx_prometheus_javaagent-0.16.1.jar=9998:/usr/local/tomcat/bin/tomcat2.yml"
      export JAVA_OPTS
    setenv_dest: "/tmp/tomcat2/setenv.sh"
    tomcat_yml_content: |
      lowercaseOutputLabelNames: true
      lowercaseOutputName: true
      whitelistObjectNames: ["java.lang:type=OperatingSystem"]
      blacklistObjectNames: []
      rules:
        - pattern: 'java.lang<type=OperatingSystem><>(committed_virtual_memory|free_physical_memory|free_swap_space|total_physical_memory|total_swap_space)_size:'
          name: os_$1_bytes
          type: GAUGE
          attrNameSnakeCase: true
        - pattern: 'java.lang<type=OperatingSystem><>((?!process_cpu_time)\w+):'
          name: os_$1
          type: GAUGE
          attrNameSnakeCase: true
    tomcat_yml_dest: "/tmp/tomcat2/tomcat2.yml"
    tomcat_container_name: "tomcat2"
    tomcat_ports:
      - "8077:8080"
      - "9998:9998"
    container_volumes:
      - "{{ war_dest_path }}:/usr/local/tomcat/webapps/ROOT.war"
      - "{{ jmx_agent_dest }}:/usr/local/tomcat/bin/jmx_prometheus_javaagent-0.16.1.jar"
      - "{{ setenv_dest }}:/usr/local/tomcat/bin/setenv.sh"
      - "{{ tomcat_yml_dest }}:/usr/local/tomcat/bin/tomcat2.yml"
      - "{{ logs_dir }}:/usr/local/tomcat/logs"
      - "{{ webapps_dir }}:/usr/local/tomcat/webapps"
    tomcat_url: "http://localhost:8077/"
    tomcat_status_filter: "name=tomcat2"

  tasks:
    - name: Check if Tomcat2 container exists
      command: podman ps -a --filter "name={{ tomcat_container_name }}" --format "{{'{{.Status}}'}}"
      register: container_status
      ignore_errors: yes
      failed_when: false
      tags: verify_container

    - name: Set fact if Tomcat2 container is not running or exists but stopped
      set_fact:
        tomcat2_not_running: "{{ container_status.stdout is defined and container_status.stdout == '' }}"
        tomcat2_exists_stopped: "{{ container_status.stdout is defined and 'exited' in container_status.stdout | lower }}"
      tags: verify_container

    - name: Start Tomcat2 container if it exists but is stopped
      command: podman start {{ tomcat_container_name }}
      when: tomcat2_exists_stopped
      tags: start_container

    - name: Deploy Tomcat2 container if it does not exist
      block:
        - name: Pull the Tomcat container image
          containers.podman.podman_image:
            name: "{{ tomcat_image }}"
            tag: latest
          tags: pull_image

        - name: Create necessary directories if not exist
          file:
            path: "{{ item }}"
            state: directory
          with_items:
            - /tmp/tomcat2
            - /tmp/tomcat2/logs
            - /tmp/tomcat2/webapps
          tags: create_directories

        - name: Ensure hello.war file exists on the controller
          stat:
            path: "{{ war_source_path }}"
          register: war_file
          tags: check_war

        - name: Copy hello.war to /tmp/tomcat2 directory
          copy:
            src: "{{ war_source_path }}"
            dest: "{{ war_dest_path }}"
          tags: copy_war

        - name: Download JMX Prometheus Java agent JAR
          get_url:
            url: "{{ jmx_agent_url }}"
            dest: "{{ jmx_agent_dest }}"
          tags: download_jmx

        - name: Create setenv.sh for Tomcat2
          copy:
            content: "{{ setenv_content }}"
            dest: "{{ setenv_dest }}"
            mode: '0755'
          tags: configure_tomcat

        - name: Create tomcat2.yml for JMX exporter
          copy:
            content: "{{ tomcat_yml_content }}"
            dest: "{{ tomcat_yml_dest }}"
          tags: configure_tomcat

        - name: Run Tomcat2 container with JMX exporter
          containers.podman.podman_container:
            name: "{{ tomcat_container_name }}"
            image: "{{ tomcat_image }}"
            state: started
            ports: "{{ tomcat_ports }}"
            volumes: "{{ container_volumes }}"
          tags: run_container

        - name: Verify sample application is accessible
          uri:
            url: "{{ tomcat_url }}"
            status_code: 200
          tags: verify_application
      when: tomcat2_not_running
