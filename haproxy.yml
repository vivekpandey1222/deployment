---
- name: Ensure HAProxy container is installed and running
  hosts: my_servers
  vars:
    haproxy_image: "docker.io/haproxytech/haproxy-alpine"
    haproxy_cfg_content: |
      global
          log stdout format raw local0
      defaults
          log global
          mode http
          option httplog
          option dontlognull
          retries 3
          timeout connect 5s
          timeout client  50s
          timeout server  50s
      frontend http_front
          bind *:80
          default_backend http_back
      backend http_back
          balance roundrobin
          server tomcat1 192.168.122.1:8075 check
          server tomcat2 192.168.122.1:8077 check
      frontend stats
         bind *:8404
         stats enable
         stats uri /stats
         stats refresh 10s
    haproxy_dest: "/tmp/haproxy.cfg"
    haproxy_container_path: "/etc/haproxy/haproxy.cfg"
    container_name: "haproxy"
    ports:
      - "8073:80"
      - "8406:8404"
    haproxy_status_filter: "name=haproxy"

  tasks:
    - name: Check if HAProxy container exists
      command: podman ps -a --filter "name={{ container_name }}" --format "{{'{{.Status}}'}}"
      register: container_status
      ignore_errors: yes
      failed_when: false
      tags: verify_container

    - name: Set fact if HAProxy container is not running or exists but stopped
      set_fact:
        haproxy_not_running: "{{ container_status.stdout is defined and container_status.stdout == '' }}"
        haproxy_exists_stopped: "{{ container_status.stdout is defined and 'exited' in container_status.stdout | lower }}"
      tags: verify_container

    - name: Start HAProxy container if it exists but is stopped
      command: podman start {{ container_name }}
      when: haproxy_exists_stopped
      tags: start_container
      register: start_result
      ignore_errors: yes

    - name: Deploy HAProxy if not running or does not exist
      block:
        - name: Pull the HAProxy image
          containers.podman.podman_image:
            name: "{{ haproxy_image }}"
            tag: "latest"
          tags: pull_image
          when: haproxy_not_running

        - name: Create HAProxy configuration file
          copy:
            content: "{{ haproxy_cfg_content }}"
            dest: "{{ haproxy_dest }}"
            mode: '0644'
          tags: create_config
          when: haproxy_not_running

        - name: Run the HAProxy container
          containers.podman.podman_container:
            name: "{{ container_name }}"
            image: "{{ haproxy_image }}"
            state: started
            ports: "{{ ports }}"
            volumes:
              - "{{ haproxy_dest }}:{{ haproxy_container_path }}"
          tags: run_container
          when: haproxy_not_running

    - name: Verify HAProxy container is running
      command: podman ps --filter "name={{ container_name }}" --format "{{'{{.Status}}'}}"
      register: container_status
      tags: verify_container

    - name: Debug container status
      debug:
        var: container_status.stdout
      tags: debug

    - name: Print HAProxy container logs for debugging
      command: podman logs {{ container_name }}
      register: haproxy_logs
      ignore_errors: yes
      tags: debug

    - name: Debug HAProxy logs
      debug:
        var: haproxy_logs.stdout
      tags: debug

    - name: Verify HAProxy frontend is accessible
      uri:
        url: "http://localhost:8073"
        status_code: 200
      register: haproxy_frontend
      ignore_errors: yes
      tags: verify_frontend

    - name: Debug HAProxy frontend access
      debug:
        var: haproxy_frontend
      tags: debug

    - name: Verify HAProxy stats page is accessible
      uri:
        url: "http://localhost:8406/stats"
        status_code: 200
      register: haproxy_stats
      ignore_errors: yes
      tags: verify_stats
