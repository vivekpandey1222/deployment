---
- name: Deploy Grafana in Container
  hosts: my_servers
  vars:
    grafana_image: "docker.io/grafana/grafana"
    grafana_container_name: "grafana"
    grafana_data: "/var/lib/grafana"
    grafana_base: "/tmp/grafana"
    grafana_ports: "3004:3000"
    grafana_env:
      GF_SECURITY_ADMIN_USER: "redhat"
      GF_SECURITY_ADMIN_PASSWORD: "redhat"

  tasks:
    
    - name: Check if Grafana container exists
      command: podman ps -a --filter "name={{ grafana_container_name }}" --format "{{'{{.Status}}'}}"
      register: container_status
      ignore_errors: yes
      failed_when: false
      tags:
        - verify_container

    - name: Set fact if Grafana container is not running or exists but stopped
      set_fact:
        grafana_not_running: "{{ container_status.stdout is defined and container_status.stdout == '' }}"
        grafana_exists_stopped: "{{ container_status.stdout is defined and 'exited' in container_status.stdout | lower }}"
      tags:
        - verify_container

    - name: Start Grafana container if it exists but is stopped
      command: podman start {{ grafana_container_name }}
      when: grafana_exists_stopped
      tags:
        - start_container
      register: start_result
      ignore_errors: yes

    - name: Deploy Grafana if not running or does not exist
      block:
        - name: Create the directory /tmp/grafana
          file:
            path: /tmp/grafana
            state: directory
            mode: '0777'
          tags:
            - create_directory
          when: grafana_not_running

        - name: Pull Grafana image
          containers.podman.podman_image:
            name: "{{ grafana_image }}"
            tag: "latest"
          tags:
            - pull_image
          when: grafana_not_running

        - name: Run Grafana container
          containers.podman.podman_container:
            name: "{{ grafana_container_name }}"
            image: "{{ grafana_image }}"
            state: started
            ports:
              - "{{ grafana_ports }}"
            env:
              "{{ grafana_env | to_json }}"  # Convert dictionary to JSON format
            volumes:
              - "{{ grafana_base }}:{{ grafana_data }}"
          tags:
            - run_container
          when: grafana_not_running

    - name: Verify Grafana container is running
      command: podman ps --filter "name={{ grafana_container_name }}" --format "{{'{{.Status}}'}}"
      register: container_status
      tags:
        - verify_container

    - name: Debug container status
      debug:
        var: container_status.stdout
      tags:
        - debug

    - name: Verify Grafana availability with curl
      command: curl  http://localhost:3004/login
      register: grafana_response
      ignore_errors: yes
      tags:
        - verify_grafana
